#!/usr/bin/env ruby

require 'ripper'
require 'erb'
require 'pathname'

class FileParser

  @@function_names = %w(required_env env_check env_fetch)
  @@base_path = File.absolute_path(File.join(File.dirname(__FILE__), "../lib/scripts"))

  def self.base_path
    @@base_path
  end

  def initialize(file)
    @file = file

    @data = {
      "environment_variables" => {}
    }

    @contents = File.read(@file)
    @lines = @contents.lines
  end

  def parse
    ast = Ripper.sexp(@contents)

    tree_search(ast, @@function_names)
    @data
  end

  def script_name
    Pathname(@file).relative_path_from(Pathname(@@base_path)).to_s.split(".").first
  end

  def markdown
    text = <<~MARKDOWN
        ### <%= script_name %>
        TODO: Some description of what I do

        <% if @data["environment_variables"].any? -%>
        #### Environment Variables
        | Variable | Default | Required | Description |
        |:--|:--|:--|
        <% @data["environment_variables"].each do |key, val| -%>
        | <%= key %> | <%= val[:default] %> | <%= val[:required] %> | <%= val[:description] %>|
        <% end -%>

        <% end -%>
      MARKDOWN

    ERB.new(text,nil, '-').result(binding)
  end

  private
  
  # [:method_add_arg,
  #  [:fcall, [:@ident, "required_env", [4, 6]]],
  #  [:arg_paren,
  #   [:args_add_block,
  #    [[:string_literal,
  #      [:string_content, [:@tstring_content, "DOCKER_IMAGE", [4, 20]]]]],
  #    false]]]
  def get_function_argument(ast, n)
    ast[2][1][1][n][1][1][1]
  end

  def comment_value(ast, regex, lines)
    line_number = ast[1][1][2][0]
    lines.times do |i|
      comment_line = @lines[line_number - 2 - i].strip
      match = comment_line.match(regex)
      return match.captures if match
    end
    nil
  end

  def comment_default(ast, lines = 2)
    comment_value(ast, /^# Default: (.*)$/i, lines)&.first
  end

  def comment_description(ast, lines = 2)
    comment_value(ast, /^# Description: (.*)$/i, lines)&.first
  end

  def parse_required_env(ast)
    @data["environment_variables"][get_function_argument(ast, 0)] = {
      required: "âœ”",
      description: comment_description(ast)
    }
  end

  def parse_env_check(ast)
    default_value = comment_default(ast)
    @data["environment_variables"][get_function_argument(ast, 0)] = {
      default: default_value || get_function_argument(ast, 1),
      description: comment_description(ast)
    }
  end

  def parse_env_fetch(ast)
    default_value = comment_default(ast)
    @data["environment_variables"][get_function_argument(ast, 0)] = {
      default: default_value || get_function_argument(ast, 1),
      description: comment_description(ast)
    }
  end

  def tree_search(ast, methods)
    return unless ast.is_a? Array
    if ast[0] == :method_add_arg && ast[1][0] == :fcall
      methods.each do |method|
        if ast[1][1].include? method
          send("parse_#{method}", ast)
        end
      end
    end
    ast.each { |node| tree_search(node, methods) }
  end
end

readme_text = <<~MARKDOWN
  # CI Scripts

  A collection of modular scripts that are commonly run in CI. The goal of this project is to reduce the number of CI configuration files that have duplicate code. Environment variables are used to configure the scripts. To include a script add the following to the CI config:

  ## Installation
  ```
  gem install ci-scripts
  ci-scripts SCRIPT_NAME
  ```

  ## Scripts

MARKDOWN

Dir.glob("#{FileParser.base_path}/**/*.rb") do |file|
  a = FileParser.new(file)
  a.parse
  readme_text += a.markdown
end

readme = File.join(File.dirname(__FILE__), "../README.md")
File.write(readme, readme_text)
